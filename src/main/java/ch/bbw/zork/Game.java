package ch.bbw.zork;import java.util.*;import java.util.stream.Collectors;/** * Class Game - the main class of the "Zork" game. * <p> * Author:  Yanis Meichtry & Oliver Zenger, September 2023 * refactoring: Yanis Meichtry, 2.10.2023 */public class Game {    private Parser parser;    private Stack<Room> path;    private Room reception, office, restaurant, storage, courtyard, guest1, guest2, guest3;    private List<Room> allRooms;    private Item ladder, combination, pan, hammer, key1, key2, key3;    private List<Item> allItems;    private List<Item> takenItems;    private double takenWeight;    public Game() {        parser = new Parser(System.in);        // Create rooms        reception = new Room("the hotel reception", false);        office = new Room("the office of the hotel", true);        restaurant = new Room("the restaurant of the hotel", false);        storage = new Room("the storage room", false);        courtyard = new Room("the courtyard outside the hotel", false);        guest1 = new Room("guest room 1", false);        guest2 = new Room("guest room 2", false);        guest3 = new Room("guest room 3", false);        allRooms = Arrays.asList(reception, office, restaurant, storage, courtyard, guest1, guest2, guest3);        // Connect rooms        reception.setExits(restaurant, null, null, null);        office.setExits(storage, null, null, null);        restaurant.setExits(courtyard, storage, reception, guest1);        storage.setExits(null, null, office, restaurant);        courtyard.setExits(null, guest3, restaurant, guest2);        guest1.setExits(guest2, restaurant, null, null);        guest2.setExits(null, courtyard, guest1, null);        guest3.setExits(null, null, null, courtyard);        // Create items        ladder = new Item("ladder", "folding ladder", 5500.0);        combination = new Item("combination", "paper with number combination 1426", 1.5);        pan = new Item("pan", "cooking pan", 1230.0);        hammer = new Item("hammer", "large hammer", 2781.7);        key1 = new Item("key1", "guest room key 1", 38.1);        key2 = new Item("key2", "guest room key 2", 38.1);        key3 = new Item("key3", "guest room key 3", 38.1);        allItems = Arrays.asList(ladder, combination, pan, hammer, key1, key2, key3);        // Drop items into the rooms        reception.addItem(key1);        reception.addItem(key2);        reception.addItem(key3);        restaurant.addItem(pan);        guest1.addItem(ladder);        guest2.addItem(hammer);        guest3.addItem(combination);        // Start game at the reception        path = new Stack();        path.push(reception);        // Start with an empty list of taken items        takenItems = new ArrayList<>();        takenWeight = 0.0;    }    public Room currentRoom() {        return path.peek();    }    /**     * Main play routine.  Loops until end of play.     */    public void play() {        printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.        boolean finished = false;        while (!finished) {            Command command = parser.getCommand();            finished = processCommand(command);        }        System.out.println("Thank you for playing. Good bye.");    }    private void printWelcome() {        System.out.println();        System.out.println("Welcome to Abandoned Hotel!");        System.out.println("Abandoned Hotel is a simple adventure game. ");        System.out.println("Go to the guest rooms and look for items there, they will help you later to crack the safe in the office. ");        System.out.println("Type 'help' if you need help.");        System.out.println();        printDescription();    }    private boolean processCommand(Command command) {        if (command.isUnknown()) {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help")) {            printHelp();        } else if (commandWord.equals("go")) {            goRoom(command);            if (currentRoom().isTarget()) {                return true;            }        } else if (commandWord.equals("quit")) {            if (command.hasSecondWord()) {                System.out.println("Quit what?");            } else {                return true; // signal that we want to quit            }        } else if (commandWord.equals("back")) {            goBack();        } else if (commandWord.equals("take")) {            takeItem(command);        } else if (commandWord.equals("drop")) {            dropItem(command);        } else if (commandWord.equals("map")) {            printMap();        }        return false;    }    private void printHelp() {        System.out.println("you have to find items to get into the storage and from there into the office where you have to hook the safe. ");        System.out.println("Your command words are:");        System.out.println(parser.showCommands());    }    private void printDescription() {        System.out.println(currentRoom().longDescription());        if (takenItems.size() > 0) {            List<String> descriptions = takenItems.stream().map(i -> i.toString()).collect(Collectors.toList());            System.out.println("You carry: " + String.join(", ", descriptions));        }    }    private void goRoom(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Go where?");        } else {            String direction = command.getSecondWord();            // Try to leave the current room.            Room nextRoom = currentRoom().nextRoom(direction);            if (nextRoom == null) {                System.out.println("There is no door!");            } else {                if (nextRoom.equals(storage)) {                    // Check if the player has the hammer                    Item hammer = findItem("hammer");                    if (hammer == null || !takenItems.contains(hammer)) {                        System.out.println("This door is locked, but you can knock it open with a hammer!");                        return;                    } else {                        Room.openStorageDoor();                        System.out.println("You used the hammer to knock the storage room door open. It's now permanently open!");                    }                } else if (nextRoom.isGuestRoom()) {                    // Check if the player has the key for the guest room                    Item key = findKeyForRoom(nextRoom);                    if (key != null && !takenItems.contains(key)) {                        System.out.println("You need the key to enter this room!");                        return;                    }                } else if (nextRoom.equals(office)) {                    // Check if the player has all three keys                    Item key1 = findItem("key1");                    Item key2 = findItem("key2");                    Item key3 = findItem("key3");                    if (key1 == null || key2 == null || key3 == null ||                            !takenItems.contains(key1) || !takenItems.contains(key2) || !takenItems.contains(key3)) {                        System.out.println("The door is locked. You need all three guestroom keys to enter the office!");                        return;                    } else {                        System.out.println("You have reached the office. There is a safe here. Try to crack it!");                        Scanner scanner = new Scanner(System.in);                        System.out.print("Safe code: ");                        int code = scanner.nextInt();                        if (code == 1426) {                            System.out.println("Very good! You used the right combination of numbers and the gold in the safe is now yours.");                            System.out.println("Congratulations! You have finished the game. Thanks for playing!");                            System.exit(0);                        } else {                            System.out.println("This was the wrong combination of numbers for the safe.");                            System.out.println("You are back in the storage room.");                            path.clear();                            path.push(storage);                            printDescription();                            return;                        }                    }                }                path.push(nextRoom);                printDescription();            }        }    }    private Item findKeyForRoom(Room room) {        if (room.isGuestRoom()) {            int roomNumber = room.getRoomNumber();            String keyName = "key" + roomNumber;            for (Item key : allItems) {                if (key.getName().equalsIgnoreCase(keyName)) {                    return key;                }            }        }        return null;    }    private void goBack() {        if (path.size() == 1) {            System.out.println("You cannot go back.");        } else {            path.pop();            printDescription();        }    }    private void takeItem(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Take what?");        } else {            String itemName = command.getSecondWord();            Item item = findItem(itemName);            if (item == null) {                System.out.println("Unknown item " + itemName);            } else if (currentRoom().containsItem(item)) {                if (takenWeight + item.getWeight() > 8000.0) {                    System.out.println("Cannot take " + item.getName() + ". Total weight too heavy.");                } else {                    currentRoom().removeItem(item);                    takenItems.add(item);                    takenWeight = takenWeight + item.getWeight();                    printDescription();                }            } else {                System.out.println("Room does not contain item " + itemName);            }        }    }    private void dropItem(Command command) {        if (!command.hasSecondWord()) {            System.out.println("Drop what?");        } else {            String itemName = command.getSecondWord();            Item item = findItem(itemName);            if (item == null) {                System.out.println("Unknown item " + itemName);            } else if (takenItems.contains(item)) {                takenItems.remove(item);                takenWeight = takenWeight - item.getWeight();                currentRoom().addItem(item);                printDescription();            } else {                System.out.println(itemName + " not in possession");            }        }    }    private void printMap() {        System.out.println("+-----------------+             +------------+             +------------------+");        System.out.println("|   Guest room 2  |-------------|  Courtyard |-------------|    Guest room 3  |");        System.out.println("+-----------------+             +------------+             +------------------+");        System.out.println("         |                             |  ");        System.out.println("+-----------------+             +-------------+            +------------------+");        System.out.println("|   Guest room 1  |-------------|  Restaurant |------------|    storage.      |");        System.out.println("+-----------------+             +-------------+            +------------------+");        System.out.println("                                       |                              |");        System.out.println("                                +-------------+            +------------------+");        System.out.println("                                |  Reception  |            |    office        |");        System.out.println("                                +-------------+            +------------------+");        printDescription();    }    private Item findItem(String name) {        for (Item item : allItems) {            if (item.getName().equals(name)) {                return item;            }        }        return null;    }}