package ch.bbw.zork;import java.util.HashMap;import java.util.List;import java.util.ArrayList;import java.util.stream.Collectors;public class Room {    private String description;    private HashMap<String, Room> exits;    private boolean target;    private List<Item> items;    private static boolean isStorageDoorOpen = false;    private static final HashMap<String, Item> roomKeys = new HashMap<>();    static {        roomKeys.put("guest1", new Item("key1", "Guest Room 1 Key", 38.1));        roomKeys.put("guest2", new Item("key2", "Guest Room 2 Key", 38.1));        roomKeys.put("guest3", new Item("key3", "Guest Room 3 Key", 38.1));    }    public Room(String description, boolean target) {        this.description = description;        this.exits = new HashMap<>();        this.target = target;        this.items = new ArrayList<>();    }    public void setExits(Room north, Room east, Room south, Room west) {        if (north != null) {            exits.put("north", north);        }        if (east != null) {            exits.put("east", east);        }        if (south != null) {            exits.put("south", south);        }        if (west != null) {            exits.put("west", west);        }    }    public static void openStorageDoor() {        isStorageDoorOpen = true;    }    public boolean isTarget() {        return target;    }    public Room nextRoom(String direction) {        return exits.get(direction);    }    public boolean containsItem(Item item) {        return items.contains(item);    }    public void addItem(Item item) {        items.add(item);    }    public void removeItem(Item item) {        items.remove(item);    }    public String shortDescription() {        return description;    }    public String longDescription() {        StringBuilder stringBuilder = new StringBuilder("You are in " + description + ".\n");        stringBuilder.append("Exits: ");        stringBuilder.append(exitString());        if (items.size() > 0) {            stringBuilder.append("\nItems in room: ");            stringBuilder.append(itemString());        }        return stringBuilder.toString();    }    public String descriptionWithItems() {        StringBuilder stringBuilder = new StringBuilder(description);        if (items.size() > 0) {            stringBuilder.append(": ");            stringBuilder.append(itemString());        }        return stringBuilder.toString();    }    public int getRoomNumber() {        String[] parts = description.split(" ");        for (String part : parts) {            try {                int roomNumber = Integer.parseInt(part);                return roomNumber;            } catch (NumberFormatException e) {            }        }        return -1;    }    private String itemString() {        List<String> descriptions = items.stream().map(i -> i.toString()).collect(Collectors.toList());        return String.join(", ", descriptions);    }    private String exitString() {        return String.join(", ", exits.keySet());    }    public boolean isGuestRoom() {        return description.toLowerCase().contains("guest room");    }    public boolean canEnterRoom(List<Item> takenItems) {        Item roomKey = roomKeys.get(description.toLowerCase());        return roomKey != null && takenItems.contains(roomKey);    }    public Item getKey() {        return roomKeys.get(description.toLowerCase());    }}